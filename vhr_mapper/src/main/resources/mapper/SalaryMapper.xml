<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.vhr.SalaryMapper">
  <resultMap id="BaseResultMap" type="org.example.vhr.Salary">
    <!--@mbg.generated-->
    <!--@Table salary-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="basicSalary" jdbcType="INTEGER" property="basicSalary" />
    <result column="bonus" jdbcType="INTEGER" property="bonus" />
    <result column="lunchSalary" jdbcType="INTEGER" property="lunchSalary" />
    <result column="trafficSalary" jdbcType="INTEGER" property="trafficSalary" />
    <result column="allSalary" jdbcType="INTEGER" property="allSalary" />
    <result column="pensionBase" jdbcType="INTEGER" property="pensionBase" />
    <result column="pensionPer" jdbcType="FLOAT" property="pensionPer" />
    <result column="createDate" jdbcType="TIMESTAMP" property="createDate" />
    <result column="medicalBase" jdbcType="INTEGER" property="medicalBase" />
    <result column="medicalPer" jdbcType="FLOAT" property="medicalPer" />
    <result column="accumulationFundBase" jdbcType="INTEGER" property="accumulationFundBase" />
    <result column="accumulationFundPer" jdbcType="FLOAT" property="accumulationFundPer" />
    <result column="name" jdbcType="VARCHAR" property="name" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbg.generated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbg.generated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, basicSalary, bonus, lunchSalary, trafficSalary, allSalary, pensionBase, pensionPer, 
    createDate, medicalBase, medicalPer, accumulationFundBase, accumulationFundPer, `name`
  </sql>
  <select id="selectByExample" parameterType="org.example.vhr.SalaryExample" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from salary
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from salary
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.example.vhr.SalaryExample">
    <!--@mbg.generated-->
    delete from salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="org.example.vhr.Salary" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into salary (basicSalary, bonus, lunchSalary, 
      trafficSalary, allSalary, pensionBase, 
      pensionPer, createDate, medicalBase, 
      medicalPer, accumulationFundBase, accumulationFundPer, 
      `name`)
    values (#{basicSalary,jdbcType=INTEGER}, #{bonus,jdbcType=INTEGER}, #{lunchSalary,jdbcType=INTEGER}, 
      #{trafficSalary,jdbcType=INTEGER}, #{allSalary,jdbcType=INTEGER}, #{pensionBase,jdbcType=INTEGER}, 
      #{pensionPer,jdbcType=FLOAT}, #{createDate,jdbcType=TIMESTAMP}, #{medicalBase,jdbcType=INTEGER}, 
      #{medicalPer,jdbcType=FLOAT}, #{accumulationFundBase,jdbcType=INTEGER}, #{accumulationFundPer,jdbcType=FLOAT}, 
      #{name,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="org.example.vhr.Salary" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into salary
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="basicSalary != null">
        basicSalary,
      </if>
      <if test="bonus != null">
        bonus,
      </if>
      <if test="lunchSalary != null">
        lunchSalary,
      </if>
      <if test="trafficSalary != null">
        trafficSalary,
      </if>
      <if test="allSalary != null">
        allSalary,
      </if>
      <if test="pensionBase != null">
        pensionBase,
      </if>
      <if test="pensionPer != null">
        pensionPer,
      </if>
      <if test="createDate != null">
        createDate,
      </if>
      <if test="medicalBase != null">
        medicalBase,
      </if>
      <if test="medicalPer != null">
        medicalPer,
      </if>
      <if test="accumulationFundBase != null">
        accumulationFundBase,
      </if>
      <if test="accumulationFundPer != null">
        accumulationFundPer,
      </if>
      <if test="name != null">
        `name`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="basicSalary != null">
        #{basicSalary,jdbcType=INTEGER},
      </if>
      <if test="bonus != null">
        #{bonus,jdbcType=INTEGER},
      </if>
      <if test="lunchSalary != null">
        #{lunchSalary,jdbcType=INTEGER},
      </if>
      <if test="trafficSalary != null">
        #{trafficSalary,jdbcType=INTEGER},
      </if>
      <if test="allSalary != null">
        #{allSalary,jdbcType=INTEGER},
      </if>
      <if test="pensionBase != null">
        #{pensionBase,jdbcType=INTEGER},
      </if>
      <if test="pensionPer != null">
        #{pensionPer,jdbcType=FLOAT},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="medicalBase != null">
        #{medicalBase,jdbcType=INTEGER},
      </if>
      <if test="medicalPer != null">
        #{medicalPer,jdbcType=FLOAT},
      </if>
      <if test="accumulationFundBase != null">
        #{accumulationFundBase,jdbcType=INTEGER},
      </if>
      <if test="accumulationFundPer != null">
        #{accumulationFundPer,jdbcType=FLOAT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.example.vhr.SalaryExample" resultType="java.lang.Long">
    <!--@mbg.generated-->
    select count(*) from salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbg.generated-->
    update salary
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.basicSalary != null">
        basicSalary = #{record.basicSalary,jdbcType=INTEGER},
      </if>
      <if test="record.bonus != null">
        bonus = #{record.bonus,jdbcType=INTEGER},
      </if>
      <if test="record.lunchSalary != null">
        lunchSalary = #{record.lunchSalary,jdbcType=INTEGER},
      </if>
      <if test="record.trafficSalary != null">
        trafficSalary = #{record.trafficSalary,jdbcType=INTEGER},
      </if>
      <if test="record.allSalary != null">
        allSalary = #{record.allSalary,jdbcType=INTEGER},
      </if>
      <if test="record.pensionBase != null">
        pensionBase = #{record.pensionBase,jdbcType=INTEGER},
      </if>
      <if test="record.pensionPer != null">
        pensionPer = #{record.pensionPer,jdbcType=FLOAT},
      </if>
      <if test="record.createDate != null">
        createDate = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.medicalBase != null">
        medicalBase = #{record.medicalBase,jdbcType=INTEGER},
      </if>
      <if test="record.medicalPer != null">
        medicalPer = #{record.medicalPer,jdbcType=FLOAT},
      </if>
      <if test="record.accumulationFundBase != null">
        accumulationFundBase = #{record.accumulationFundBase,jdbcType=INTEGER},
      </if>
      <if test="record.accumulationFundPer != null">
        accumulationFundPer = #{record.accumulationFundPer,jdbcType=FLOAT},
      </if>
      <if test="record.name != null">
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbg.generated-->
    update salary
    set id = #{record.id,jdbcType=INTEGER},
      basicSalary = #{record.basicSalary,jdbcType=INTEGER},
      bonus = #{record.bonus,jdbcType=INTEGER},
      lunchSalary = #{record.lunchSalary,jdbcType=INTEGER},
      trafficSalary = #{record.trafficSalary,jdbcType=INTEGER},
      allSalary = #{record.allSalary,jdbcType=INTEGER},
      pensionBase = #{record.pensionBase,jdbcType=INTEGER},
      pensionPer = #{record.pensionPer,jdbcType=FLOAT},
      createDate = #{record.createDate,jdbcType=TIMESTAMP},
      medicalBase = #{record.medicalBase,jdbcType=INTEGER},
      medicalPer = #{record.medicalPer,jdbcType=FLOAT},
      accumulationFundBase = #{record.accumulationFundBase,jdbcType=INTEGER},
      accumulationFundPer = #{record.accumulationFundPer,jdbcType=FLOAT},
      `name` = #{record.name,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.example.vhr.Salary">
    <!--@mbg.generated-->
    update salary
    <set>
      <if test="basicSalary != null">
        basicSalary = #{basicSalary,jdbcType=INTEGER},
      </if>
      <if test="bonus != null">
        bonus = #{bonus,jdbcType=INTEGER},
      </if>
      <if test="lunchSalary != null">
        lunchSalary = #{lunchSalary,jdbcType=INTEGER},
      </if>
      <if test="trafficSalary != null">
        trafficSalary = #{trafficSalary,jdbcType=INTEGER},
      </if>
      <if test="allSalary != null">
        allSalary = #{allSalary,jdbcType=INTEGER},
      </if>
      <if test="pensionBase != null">
        pensionBase = #{pensionBase,jdbcType=INTEGER},
      </if>
      <if test="pensionPer != null">
        pensionPer = #{pensionPer,jdbcType=FLOAT},
      </if>
      <if test="createDate != null">
        createDate = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="medicalBase != null">
        medicalBase = #{medicalBase,jdbcType=INTEGER},
      </if>
      <if test="medicalPer != null">
        medicalPer = #{medicalPer,jdbcType=FLOAT},
      </if>
      <if test="accumulationFundBase != null">
        accumulationFundBase = #{accumulationFundBase,jdbcType=INTEGER},
      </if>
      <if test="accumulationFundPer != null">
        accumulationFundPer = #{accumulationFundPer,jdbcType=FLOAT},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.example.vhr.Salary">
    <!--@mbg.generated-->
    update salary
    set basicSalary = #{basicSalary,jdbcType=INTEGER},
      bonus = #{bonus,jdbcType=INTEGER},
      lunchSalary = #{lunchSalary,jdbcType=INTEGER},
      trafficSalary = #{trafficSalary,jdbcType=INTEGER},
      allSalary = #{allSalary,jdbcType=INTEGER},
      pensionBase = #{pensionBase,jdbcType=INTEGER},
      pensionPer = #{pensionPer,jdbcType=FLOAT},
      createDate = #{createDate,jdbcType=TIMESTAMP},
      medicalBase = #{medicalBase,jdbcType=INTEGER},
      medicalPer = #{medicalPer,jdbcType=FLOAT},
      accumulationFundBase = #{accumulationFundBase,jdbcType=INTEGER},
      accumulationFundPer = #{accumulationFundPer,jdbcType=FLOAT},
      `name` = #{name,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>